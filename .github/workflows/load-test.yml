# This is a basic workflow to help you get started with Actions

name: LoadTest
env:
  JMETER_VERSION: 5.4.3
  NUMBER_OF_LAYERS : 5
  SIZE_OF_LAYER_KB : 10024
  DOCKER_REGISTRY : containers-loadtest.pkg.github.com
  OWNER : monalisa
  DOCKER_USER : monalisa
  DOCKER_PASSWORD : ${{secrets.PAT_PRW}}
  DOCKER_BUILDKIT : 1
  DOCKER_GEN_ID : ${{ github.run_id }}${{ github.run_attempt }}
  NUMBER_OF_JOBS : 16
  
  
# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  init:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest 
    steps:
      - uses: actions/checkout@v2
      - name: cache-apache-jmeter
        id: cache-jmeter
        uses: actions/cache@v3
        env:
          cache-name: jmeter-cache
        with:
          path: /opt/apache
          key: ${{ runner.os }}-build-${{ env.cache-name }}
          restore-keys: |
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      
      # Run only on cache miss
      - if: ${{ steps.cache-jmeter.outputs.cache-hit != 'true' }} 
        name: install-jmeter  
        run: |
          sudo apt-get install ca-certificates default-jre && \
          curl -L https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-${JMETER_VERSION}.tgz --output /tmp/apache-jmeter-${JMETER_VERSION}.tgz && \
          tar -zxvf /tmp/apache-jmeter-${JMETER_VERSION}.tgz && \
          mkdir -p /opt/apache && \
          mv apache-jmeter-${JMETER_VERSION} /opt/apache && \
          rm /tmp/apache-jmeter-${JMETER_VERSION}.tgz
          
      - name: generate-jobs
        id: generate-jobs
        run: |
         JOB_STRATEGY_MATRIX=$(node -e "let r=[]; for(let i = 1; i <= process.env.NUMBER_OF_JOBS; i++) { r.push(\"job-\"+i) }; console.log(JSON.stringify(r));")
         echo "::set-output name=jobs-matrix::$JOB_STRATEGY_MATRIX" 
       
      # get duration of run from properties file and set limit + 2 min
      - name: set-duration-run
        id: set-duration-run
        run: |
          echo "DURATION_OF_RUN=$(cat packages.properties | grep -w "time" | cut -d'=' -f2-)"
          echo "Duration of run: $DURATION_OF_RUN"
          DR=$(( DURATION_OF_RUN / 60 + 1 ))
          echo "Duration of Run: $DR"
          echo "::set-output name=duration-of-run::$DR"
           
    outputs:
      jobs-matrix: ${{ steps.generate-jobs.outputs.jobs-matrix}}
      duration-of-run: ${{ steps.set-duration-run.outputs.duration-of-run}}
      
  load-test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: init
    continue-on-error: true
    strategy:
      matrix:
        job: ${{fromJSON(needs.init.outputs.jobs-matrix)}}
        
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v2
        with:
         node-version: 16
         registry-url: https://npm.pkg.github.com
      - name: cache-apache-jmeter
        id: cache-jmeter
        uses: actions/cache@v3
        env:
          cache-name: jmeter-cache
        with:
          path: /opt/apache
          key: ${{ runner.os }}-build-${{ env.cache-name }}
          restore-keys: |
            ${{ runner.os }}-build-
            ${{ runner.os }}-
            
      - name: install-jmeter
        if: ${{ steps.cache-jmeter.outputs.cache-hit != 'true' }}
        run: |
          sudo apt-get install ca-certificates default-jre && \
          curl -L https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-${JMETER_VERSION}.tgz --output /tmp/apache-jmeter-${JMETER_VERSION}.tgz && \
          tar -zxvf /tmp/apache-jmeter-${JMETER_VERSION}.tgz && \
          mkdir -p /opt/apache && \
          mv apache-jmeter-${JMETER_VERSION} /opt/apache && \
          rm /tmp/apache-jmeter-${JMETER_VERSION}.tgz
          
#       - name: view-versions
#         run: |
#          npm --version
#          docker --version
#          /opt/apache/apache-jmeter-${JMETER_VERSION}/bin/jmeter --version
#          echo "DOcker Generation Id: $DOCKER_GEN_ID"
          
      - name: run-load-test
        timeout-minutes: ${{fromJSON(needs.init.outputs.duration-of-run)}}
        run: |
         chmod +x ./run-docker-build-publish.sh
         chmod +x ./run-docker-pull.sh
         /opt/apache/apache-jmeter-${JMETER_VERSION}/bin/jmeter -n -t packages-load-test.jmx -p packages.properties -l "${{ matrix.job }}.csv" -j "test.log" 
   
      - name: move-artifacts
        run: |
         mkdir -p jobs/${{ matrix.job }}
         mv ./${{ matrix.job }}.csv ./jobs/${{ matrix.job }}/
         mv ./test.log ./jobs/${{ matrix.job }}/
         mv ./stdout ./jobs/${{ matrix.job }}/
         mv ./stderr ./jobs/${{ matrix.job }}/
 
      - name: Upload Job Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: job-artifacts
          path: jobs
          
  generate-report:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: load-test
    steps:
      - uses: actions/checkout@v2
      - name: create-artifact-dir  
        run: |
         mkdir jobs
         
      - uses: actions/download-artifact@v3
        with:
            name: job-artifacts
            path: jobs
      
      - name: cache-apache-jmeter
        id: cache-jmeter
        uses: actions/cache@v3
        env:
          cache-name: jmeter-cache
        with:
          path: /opt/apache
          key: ${{ runner.os }}-build-${{ env.cache-name }}
          restore-keys: |
            ${{ runner.os }}-build-
            ${{ runner.os }}-
            
      - name: install-jmeter
        if: ${{ steps.cache-jmeter.outputs.cache-hit != 'true' }}
        run: |
          sudo apt-get install ca-certificates default-jre && \
          curl -L https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-${JMETER_VERSION}.tgz --output /tmp/apache-jmeter-${JMETER_VERSION}.tgz && \
          tar -zxvf /tmp/apache-jmeter-${JMETER_VERSION}.tgz && \
          mkdir -p /opt/apache && \
          mv apache-jmeter-${JMETER_VERSION} /opt/apache && \
          rm /tmp/apache-jmeter-${JMETER_VERSION}.tgz
          
        # combine csvs in jobs folder to generate final html dashboard output
      - name: generate-html-dashboards
        run: |
         mkdir combined
         find jobs/ -type f -name '*.csv' -exec cp '{}' combined/ ';'
         cd combined
         awk '(NR == 1) || (FNR > 1)' *.csv > ../result.csv
         cd ..
         mkdir output
         /opt/apache/apache-jmeter-${JMETER_VERSION}/bin/jmeter -g ./result.csv -o ./output 
         mv ./result.csv ./output/
     
      - name: Upload Results
        uses: actions/upload-artifact@v2
        with:
          name: jmeter-loadtest-results
          path: output
  
    
